<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfJTUAAAAAAB8lMwMVGiZyHiQyyS81
        SuhUXIDfdXyh3ICGp82DjKehoae/HwAAAACossAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFh0oAAAAAAAWHCdLFx0p5iAm
        NP86Qlz+UFd//4OJsv+XncD/p6vJ/6isyP6fpL3/p6/AdAAAAACpr8UAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPSwAXGyoSFBslthwi
        L/8fJjP+PERe/lBcgv5ZYY3/i5G6/6Cmyf+yttP+ur/W/7K3z/6nrsL/qrDGv6mwvwWpr8UAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsMDIAPjk7BBUb
        JuQeJDD/LTVH/kZQa/9SXoD/aXac/1lijv9udqf/lp7H/6Ss0P+0udb/vMHX/7S7z/6ts8n/qq/H2ait
        wxUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAfJCqWISg2/ygxQ/9td5n+bXma/01ZfP9BSmv/b3en/36Esv+VncX/qLLQ/62z0/+6v9b/u8LW/rC3
        z/6ts8r+qK/G5aOjxgOor8UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABWVkUATk5EDh8lMf8lLT3+V2KC/pKcvf9kbpL/Nj9a/zI3Wf90eLD/g4q6/56lzv+7v9v/u8Da/73C
        2v+3vdP/rLXO/7K3zv+rscj/qK7GggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAoLTRhICY0/zI9U/9hbpL/dIGn/z5HZP8mKT7/LDBM/0pLdP9pbJz/pKbM/8DE
        5P/Cx+H/ub/a/56oxP+2vNP/t7zU/rS60f6rsMj/rLPKIbG3zgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACQqNachKTb/OUJf/nWBpv91f6n/Qkls/0FGZP9gZpX/kpfE/46R
        wv+EiLX/fICo/5aawP+Sm8L/cH6l/7i+1/+8w9b/uL7T/7O5z/6utMvtrbLKCqiuxQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJCo27iYuP/5PWoL/eYKx/3V9qP9BS27/LjRM/z9H
        bP+Kj77/gIa4/7Cx2P+/wOH/uLnc/46XvP93hqv/tLvY/7nB1f+6wdb/ucHT/7C2zf+rscmmAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcnZPAEREPSclKzj/LDRJ/15olf96grT/Y2yZ/yMu
        Qf8yO1D/eIGw/8XE6f++v+H/sbDa/7+95P+Hi7r/XWuZ/4uWvv+2u9b/ub/W/73E2f+6wdT+tbvS/p6i
        vP8rM0MqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALzA7eyUrOf8yPFP+Ym6b/4CJ
        uv9ncKP/JC5D/zI8UP9/hbX/ycjs/8PE6v/Avur/en6y/0FThP+AicD/sbPd/7zA3v+3v9r/vsXa/7m/
        0/+4vtT/qKzG/1ticbIAAAAAJjA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAPD88AAAAAAAhJDTnKTFA/zhD
        Xv9daI//Y3Gd/1lnlP9CTGz/NkBX/4GIu//Ky+//ycvu/7Kw4v9qd7j/hY/L/6yr3//Ew+f/yMvm/73C
        3P+7wdr/ub/V/7q+1f6vs8z+jpOm/xsmLiQAAAAAAAAAAAAAAAAAAAAAAAAAAEJGQQAAAAAAFxonhx8k
        NP8pNEP+QU1e/z9FWv9RW33/UFuC/zlEZf8tNEz/j5XH/9LT8//V1vL/uLni/5CVy/+Plcf/pana/73A
        5v/FyeX/v8bg/7a+2f+5wdj/s7fT/7S50f+usMf/V15qLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACot
        M14REx7/HyMu/hkeI/4oKzP/HSEu/zM0RP9kYn//PkNa/xsiLv99i7//ytHy/4aOr/+Ejb//iJHD/5qh
        zv+ttNr/t7/k/7vE5f+5xOD/q7fW/7rA2P+tss//mZ7F/6yv0P+Cgo83AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALzJAMxkcJf8cICj/JCo2/yEmMf9NU27/YWeF/2dphP84PVP/IiY0/2hzn/+fp8n/cXmV/1FX
        ff9cX4X/kZOx/7rA2/+pttr/uMPj/7rF3/+vudf/tLnW/6+0z/97gLX+oaXM/46NmkkAAAAAAAAAAAAA
        AAAAAAAAAAAAACclHwAoKSUUEhUU/igtOf8nLzz/KDZF/yk1Q/83P1D/QElf/1FZe/9JUn7/pavV/6uw
        1v9qcJT/cXqj/1VbeP99f5j/jpKq/46Qov9haHj/vsfi/7S+2v+wtdH/p6vJ/4CHuv+vss//kZSrTAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABASEDMQFRb/KjE+/jE6Sf9DTmj/RVFu/1loiv99iK7/jpnE/4iQ
        v/+Umcr/W2KX/05WhP9UWnr/XGWE/4SLov+pr8b/sbjR/7C41P9jan7/h4yf/7K30P+ip8L/wcPW/piX
        wf93frVcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADxAPhRMYGv8uNkT/Nz9Q/0FLZP9KVXb/d4Os/5ij
        yv+nsdX/qrHU/5uiy/+MlsH/f4q1/4yYuv+Xo8X/m6fI/52pyP+ps9H/vMPa/8PI3/+vtcv/foKO/0lP
        Xv9fZ4H/bnKr/4SJpHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOEA/qFRkd/iw0Q/83P1H/RlNy/1Rj
        iP93g63/kZzF/6q12f+dp8//k5/I/6uz2f+wuN3/yM3o/83R6P/FyuP/xcvj/8fM4v/CyN3/vcPb/7rA
        1P9iaHz/Iigx/zI8R/5mbIf/W11eHQAAAAAAAAAAAAAAAAAAAAAAAAAAiIBzAQ8REf8UGRr/ICcy/zU+
        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
        AD/4AAA//AAAf/4AAH//gAD//8AD////H/8=
</value>
  </data>
</root>